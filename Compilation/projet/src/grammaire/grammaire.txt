Prgm := 'Program' . 'ident' . (/ Decl-Const /) . (/ Decl-Var /) . (/ Decl-Tab /) . (/ Decl-fonction /) . Bloc . '.'#28 ,
Decl-Const := (/ 'const' . 'ident'#1 . '=' . ENTIER#2 . [ ';' . 'ident'#2 . '=' . ENTIER#2 ] . ';' . /) ,
ENTIER := [ '0' + '1' + '2' + '3' + '4' + '5' + '6' + '7' + '8' + '9' ] ,
Decl-Var := (/ 'var' . 'ident'#1 . [ ',' . 'ident'#1 ] . ';' /) ,
Decl-Tab := (/ 'TODO' /) ,
Decl-fonction := (/ 'TODO' /) ,
Bloc := 'DEBUT' . Inst . 'FIN' ,
Booleen := TB . [ 'OU#30' . TB#31 ] ,
TB := FB . [ 'ET#32' . FB#31 ] ,
FB := PB#3000 + 'NON#33' . PB#31 ,
PB := ( 'ident'#4 + ENTIER#5 ) . OPREL . ( 'ident'#4 + ENTIER#5 ) + '[' . Booleen . ']' ,
OPREL := ( '==' + '>' + '<' + '>=' + '<=' + '!=' ) ,
OPMATH := ( '+' + '++' + '-' + '--' + '*' + '/' + '%' + '!' ) ,
OPEGAL := ( ':=' + '=' ) ,
Inst := ( AFFECTATION#27 + COND + WHILE + READ + WRITE ) . [ Inst ] ,
AFFECTATION := ( 'ident'#3 . OPEGAL . ( 'ident#4' + ENTIER#5 ) . ( ';' + ( OPMATH . ( 'ident#4' + ENTIER#5 ) . [ OPMATH#1000 . ( 'ident'#4 + ENTIER#5 ) ] . ';#1000' ) ) ) ,
COND := 'IF' . Booleen#2000 . 'THEN'#2005 . Inst#2002 . 'ELSE'#2001 . Inst . 'ENDIF'#2003 ,
WHILE := 'WHILE' . Booleen#2000 . 'DO' . Inst#2004 . 'ENDWHILE' ,
READ := 'Read' . 'ident#3' . ';'#14 ,
WRITE := 'Writeln' . ( 'ident'#4 + ENTIER#5 ) . ';'#16 , ;